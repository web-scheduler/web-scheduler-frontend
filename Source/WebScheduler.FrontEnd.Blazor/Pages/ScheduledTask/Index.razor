@page "/scheduledtasks"
@attribute [Authorize]
@using WebScheduler.Api.ViewModels
@using Microsoft.Extensions.Logging
@inject ILogger<View> Logger
@inject NavigationManager NavigationManager
@inject ScheduledTaskService scheduledTaskService
@using Microsoft.AspNetCore.WebUtilities
<PageTitle>My Scheduled Tasks</PageTitle>
<Bar Breakpoint="Breakpoint.Desktop">

    <BarMenu>
        <BarStart>
            <BarItem>
                <Button Color="Color.Primary" Type="ButtonType.Link" To="scheduledtasks/new">New Task</Button>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>
<DataGrid TItem="@ScheduledTask"
          Data="@scheduledTasks"
          ReadData="@OnReadData"
          TotalItems="@totalScheduledTasks"
          PageSize=10
          RowSelectable=@(_=> false)
          ShowPager
          Responsive>

    <DataGridCommandColumn TItem="ScheduledTask" />
    <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.Name)" Caption="Task Name" Editable="false">
        <DisplayTemplate>
            <Link To="@("scheduledtasks/"+context.ScheduledTaskId.ToString())">@context.Name</Link>
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.Description)" Caption="Description" />
    <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.IsEnabled)" Caption="Enabled">
        <DisplayTemplate>
            <Switch TValue="bool" Value="@context.IsEnabled" Disabled="true" />
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

@code {

    private List<ScheduledTask> scheduledTasks = default!;

    private int totalScheduledTasks = default;
    private PagedCollection<ScheduledTask> lastPagedData = default!;
    private async Task OnReadData(DataGridReadDataEventArgs<ScheduledTask> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            if (this.lastPagedData is not null && !this.lastPagedData.PageInfo.HasNextPage)
            {
                return;
            }

            int skip, pageSize;
            // this can be call to anything, in this case we're calling a fictional api
            //var response = await Http.GetJsonAsync<ScheduledTask[]>( $"some-api/ScheduledTasks?page={e.Page}&pageSize={e.PageSize}" );
            if (e.ReadDataMode is DataGridReadDataMode.Virtualize)
            {
                skip = e.VirtualizeOffset;
                pageSize = e.VirtualizeCount;
            }
            else if (e.ReadDataMode is DataGridReadDataMode.Paging)
            {
                skip = ((e.Page - 1) * e.PageSize);
                pageSize = e.PageSize;
            }
            else
            {
                throw new NotImplementedException("ReadDataMode");
            }

            var pageOptions = new PageOptions()
                {
                    First = skip,
                };
            //if(this.lastPagedData is not null)
            //{
            //    var parsedQuery = QueryHelpers.ParseQuery(this.lastPagedData?.PageInfo?.NextPageUrl?.AbsoluteUri);
            //    if(parsedQuery.TryGetValue("After", out var  val))
            //    {
            //           pageOptions.After = val.FirstOrDefault();
            //    }
            //}
            var ret = await scheduledTaskService.GetPageAsync(pageOptions);

            if (ret is null)
            {
                throw new Exception("Result is null");
            }
            this.lastPagedData = ret;

            this.totalScheduledTasks = ret.TotalCount;
            scheduledTasks = ret.Items;
        }
    }
}
