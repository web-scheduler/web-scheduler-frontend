@page "/scheduledtasks/new"
@attribute [Authorize]

@inject ScheduledTaskService scheduledTaskService
@inject ILogger<New> Logger
@inject NavigationManager NavigationManager
@inject IPageProgressService PageProgressService
@inject INotificationService NotificationService

<PageTitle>My Scheduled Tasks</PageTitle>

<Heading Size="HeadingSize.Is1">New Scheduled Task</Heading>


<Validations Mode="ValidationMode.Auto" Model="@model" StatusChanged="this.ValidationStatusChange">

    <Validation>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Placeholder="Task Name" @bind-Text="@model.Name">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <MemoEdit Placeholder="Description" @bind-Text="@model.Description">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </MemoEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">Schedule</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Placeholder="* * * * *" @bind-Text="@model.CronExpression" @onkeypress="this.UpdateCronDescription" @onchange="this.UpdateCronDescription">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
                <Paragraph>@this.CronExpressionDescription</Paragraph>

            </FieldBody>

        </Field>
    </Validation>
    <Validation>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">Trigger Type</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <Select TValue="WebScheduler.Abstractions.Grains.Scheduler.TaskTriggerType" @bind-SelectedValue="this.model.TriggerType" @onchange="OnHttpTriggerDropDownChange">
                    <ChildContent>
                        @foreach (var triggerType in Enum.GetValues(typeof(WebScheduler.Abstractions.Grains.Scheduler.TaskTriggerType)))
                        {
                            <SelectItem @key="@triggerType" Value="@triggerType">@triggerType</SelectItem>
                        }
                    </ChildContent>
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </Select>

            </FieldBody>

        </Field>
    </Validation>
    @if (this.selectedTriggerType is not null)
    {
        <Card>
            <CardHeader>@this.model.TriggerType Configuration</CardHeader>
            <CardBody>
                <CascadingValue Value="this.model">

                    <DynamicComponent Type="@this.selectedTriggerType" />
                </CascadingValue>

            </CardBody>
        </Card>
    }
</Validations>

<Button Color="Color.Primary" Type="ButtonType.Submit" @onclick="HandleValidSubmit" Disabled="@isFormValid">Save</Button>

@code {
    private string CronExpressionDescription = string.Empty;

    protected SaveScheduledTask model { get; set; } = new()
        {
            CronExpression = $"* * * * *",

        };

    bool isFormValid;

    private Type? selectedTriggerType;

    private void ValidationStatusChange(ValidationsStatusChangedEventArgs e)
    {
        isFormValid = e.Status switch
        {
            ValidationStatus.Success => false,
            _ => true,
        };
    }
    private void OnHttpTriggerDropDownChange(ChangeEventArgs e)
    {
        this.selectedTriggerType = e.Value?.ToString()?.Length > 0 ?
            Type.GetType($"WebScheduler.FrontEnd.Blazor.Shared.TriggerTypes.{e.Value}") : null;
    }
    protected Task UpdateCronDescription(KeyboardEventArgs e)
    {
        this.CronExpressionDescription = this.GetCronExpressionDescription(@model.CronExpression.ToString() ?? string.Empty);
        return Task.CompletedTask;
    }
    protected Task UpdateCronDescription(ChangeEventArgs e)
    {
        this.CronExpressionDescription = this.GetCronExpressionDescription(@model.CronExpression.ToString() ?? string.Empty);
        return Task.CompletedTask;
    }
    protected override Task OnInitializedAsync()
    {
        this.CronExpressionDescription = this.GetCronExpressionDescription(this.model.CronExpression);
        this.selectedTriggerType = Type.GetType($"WebScheduler.FrontEnd.Blazor.Shared.TriggerTypes.{this.model.TriggerType}");
        return Task.CompletedTask;
    }
    protected string GetCronExpressionDescription(string expression)
    {
        try
        {
            return CronExpressionDescriptor.ExpressionDescriptor.GetDescription(expression);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unable to parse expression: {CronExpression}", expression);
        }

        return string.Empty;
    }
    private async Task HandleValidSubmit()
    {
        await this.PageProgressService.Go(null, options => { options.Color = Color.Success; });
        Logger.LogInformation("HandleValidSubmit called");
        try
        {
            var result = await scheduledTaskService.CreateScheduledTaskAsync(model);
            if (result != null)
            {
                NavigationManager.NavigateTo($"scheduledtasks/{result.ScheduledTaskId}");
            }
        }
        catch (Exception ex)
        {
            await this.NotificationService.Error("There was an error saving your Scheduled Task. Please try again.", "Error Saving Task", a => a.IntervalBeforeClose = TimeSpan.FromSeconds(10).TotalMilliseconds);
            Logger.LogError(ex, "Error creating scheduled task");
        }
        finally
        {
            await this.PageProgressService.Go(-1);
        }
    }
}
