@using System.ComponentModel.DataAnnotations
<Validation>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">URL</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit Placeholder="URL" @bind-Text="this.EndPointUrl">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </TextEdit>
        </FieldBody>
    </Field>
</Validation>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is2">Trigger Type</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is10">
        <Select TValue="HttpVerb" @bind-SelectedValue="this.selectedHttpMethod">
            <ChildContent>
                @foreach (var httpVerb in Enum.GetValues(typeof(HttpVerb)))
                {
                    <SelectItem @key="@httpVerb" Value="@httpVerb" Disabled="(HttpVerb)httpVerb!=HttpVerb.GET">@httpVerb@((MarkupString)$"{((HttpVerb)httpVerb!=HttpVerb.GET?" ➡️ Coming Soon!":string.Empty)}")</SelectItem>
                }
            </ChildContent>
        </Select>
    </FieldBody>
</Field>
@code {

    [CascadingParameter(Name = "Model")]
    public SaveScheduledTask? model { get; set; }

    [Required]
    private HttpVerb selectedHttpMethod
    {
        set
        {
            if (this.model is null)
            {
                return;
            }
            this.model.HttpTriggerProperties.HttpMethod = value switch
            {
                HttpVerb.GET => HttpMethod.Get,
                HttpVerb.POST => HttpMethod.Post,
                HttpVerb.PUT => HttpMethod.Put,
                HttpVerb.DELETE => HttpMethod.Delete,
                HttpVerb.HEAD => HttpMethod.Head,
                HttpVerb.PATCH => HttpMethod.Patch,
                HttpVerb.OPTIONS => HttpMethod.Options,
                _ => throw new ArgumentOutOfRangeException()
            };
        }
        get
        {
            return this.model?.HttpTriggerProperties.HttpMethod.Method switch
            {
                "GET" => HttpVerb.GET,
                "POST" => HttpVerb.POST,
                "PUT" => HttpVerb.PUT,
                "DELETE" => HttpVerb.DELETE,
                "HEAD" => HttpVerb.HEAD,
                "PATCH" => HttpVerb.PATCH,
                "OPTIONS" => HttpVerb.OPTIONS,
                _ => throw new ArgumentOutOfRangeException()

            };
        }
    }

    private enum HttpVerb
    {
        GET = 0,
        POST = 1,
        PUT = 2,
        DELETE = 3,
        HEAD = 4,
        PATCH = 5,
        OPTIONS = 6
    }

    [DataType(DataType.Url)]
    [Url()]
    protected string EndPointUrl
    {
        get
        {
            return this.model?.HttpTriggerProperties.EndPointUrl?.ToString() ?? "https://example.com";
        }
        set
        {
            if (this.model is null)
            {
                return;
            }
            this.model.HttpTriggerProperties.EndPointUrl = new(value);
        }
    }
}
