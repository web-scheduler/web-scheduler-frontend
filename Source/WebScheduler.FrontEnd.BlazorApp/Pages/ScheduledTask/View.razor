@page "/scheduledtasks/{Id:guid}"
@attribute [Authorize]
@using Cronos
@inject ILogger<View> Logger
@inject NavigationManager NavigationManager
@inject ScheduledTaskService scheduledTaskService
@inject IPageProgressService PageProgressService
@inject INotificationService NotificationService

<PageTitle>My Scheduled Tasks - Web Scheduler</PageTitle>

<Bar Breakpoint="Breakpoint.Desktop">

    <BarMenu>
        <BarStart>
            <BarItem>
                <Button Color="Color.Primary" Type="ButtonType.Link" To="scheduledtasks"><Icon Name="IconName.StepBackward" Margin="Margin.Is4.FromRight" />All Tasks</Button>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>

@if (this.model.ScheduledTaskId == Guid.Empty)
{
    <Div><SpinKit Type="SpinKitType.Fold" Color="#36403a" Centered="true" /></Div>
}

@if (this.model.ScheduledTaskId != Guid.Empty)
{
    <Row>
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle>
                        @model.Name<Blazorise.Link To="@($"/scheduledtasks/{model.ScheduledTaskId}/Edit")" Title="Edit"><Icon Name="IconName.Edit" IconSize="IconSize.Large" Margin="Margin.Is4.FromLeft" /></Blazorise.Link>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>@model.Description</CardText>
                </CardBody>
                <CardBody>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Created</TableHeaderCell>
                                <TableHeaderCell>Modified</TableHeaderCell>
                                <TableHeaderCell>Last Run</TableHeaderCell>
                                <TableHeaderCell>Next Run</TableHeaderCell>
                                <TableHeaderCell>Schedule</TableHeaderCell>
                                <TableHeaderCell>Enabled</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>

                            <TableRow>
                                <TableRowCell>@model.CreatedAt</TableRowCell>
                                <TableRowCell>@model.ModifiedAt</TableRowCell>
                                <TableRowCell>@model.LastRunAt</TableRowCell>
                                <TableRowCell>@model.NextRunAt</TableRowCell>
                                <TableRowCell>
                                    @this.CronExpressionDescription
                                    <Paragraph TextColor="TextColor.Muted">@model.CronExpression</Paragraph>
                                </TableRowCell>
                                <TableRowCell>
                                    <Switch TValue="bool" @bind-Checked="@model.IsEnabled" Disabled="true" />
                                </TableRowCell>
                            </TableRow>

                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardHeader>
                    <CardTitle>Up Next...</CardTitle>
                </CardHeader>

                <CardBody>

                    @if (!this.NextRuns?.Any() ?? false)
                    {
                        <Paragraph>There are no runs scheduled in the next 30 days.</Paragraph>
                    }
                    else
                    {
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>Future Run Times</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (var run in this.NextRuns ?? new List<DateTime>())
                                {

                                    <TableRow @key="run.Ticks">
                                        <TableRowCell>@run</TableRowCell>
                                    </TableRow>
                                }

                            </TableBody>
                        </Table>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row>
        <Card>
            <CardHeader>
                <CardTitle>Trigger Details</CardTitle>
            </CardHeader>
            <CardBody>
                @switch (this.model.TriggerType)
                {
                    case TaskTriggerType.HttpTrigger:
                        {
                            <Table>
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell>Method</TableHeaderCell>
                                        <TableHeaderCell>URL</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    <TableRow>
                                        <TableRowCell>@this.model.HttpTriggerProperties.HttpMethod</TableRowCell>
                                        <TableRowCell><Blazorise.Link To="@this.model.HttpTriggerProperties.EndPointUrl" Target="Target.Blank">@this.model.HttpTriggerProperties.EndPointUrl<Icon Name="IconName.ExternalLinkSquareAlt" Margin="Margin.Is2.FromLeft" /></Blazorise.Link></TableRowCell>
                                    </TableRow>
                                </TableBody>
                            </Table>
                            <Card>
                                <CardHeader>
                                    <CardTitle>HTTP Headers</CardTitle>
                                </CardHeader>
                                <CardBody>
                                    <ListGroup>
                                        @foreach (var header in this.model.HttpTriggerProperties.Headers)
                                        {
                                            <ListGroupItem>@header.Key: @header.Value</ListGroupItem>
                                        }
                                    </ListGroup>

                                </CardBody>
                            </Card>
                            break;
                        }
                }
            </CardBody>
        </Card>
    </Row>
}
@code {
    [Parameter]
    public Guid Id { get; set; }

    private ScheduledTask model = new();
    private IEnumerable<DateTime> NextRuns = null!;
    private string CronExpressionDescription = string.Empty;

    protected string GetCronExpressionDescription()
    {
        try
        {
            return CronExpressionDescriptor.ExpressionDescriptor.GetDescription(model.CronExpression);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unable to parse expression: {CronExpression}", model.CronExpression);
        }

        return string.Empty;
    }
    protected IEnumerable<DateTime> GetNextRuns()
    {
        try
        {
            var c = CronExpression.Parse(this.model.CronExpression, Cronos.CronFormat.IncludeSeconds);
            return c.GetOccurrences(model.LastRunAt ?? DateTime.UtcNow, (model.LastRunAt ?? DateTime.UtcNow).AddDays(30), true, true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unable to parse expression: {id}", model.CronExpression);
            return null!;
        }
    }
    protected async override Task OnInitializedAsync()
    {
    tryAgain:
        try
        {
            await this.PageProgressService.Go(null, options => { options.Color = Color.Success; });

            model = await scheduledTaskService.GetScheduledTaskAsync(this.Id);
            this.NextRuns = this.GetNextRuns().Take(5);
            this.CronExpressionDescription = this.GetCronExpressionDescription();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting scheduled task: {id}", this.Id);
            await this.NotificationService.Error("There was an error loading your Scheduled Tasks. Please try again.", "Error Saving Task", a => a.IntervalBeforeClose = TimeSpan.FromSeconds(10).TotalMilliseconds);
            await Task.Delay(TimeSpan.FromSeconds(5));
            goto tryAgain;
        }
        finally
        {
            await this.PageProgressService.Go(-1);
        }

    }
}
