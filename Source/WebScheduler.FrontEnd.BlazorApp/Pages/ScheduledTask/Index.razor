@page "/scheduledtasks"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@attribute [Authorize]

@inject ILogger<View> Logger
@inject NavigationManager NavigationManager
@inject ScheduledTaskService scheduledTaskService
@inject IPageProgressService PageProgressService
@inject INotificationService NotificationService

<PageTitle>My Scheduled Tasks</PageTitle>
<Bar Breakpoint="Breakpoint.Desktop">

    <BarMenu>
        <BarStart>
            <BarItem>
                <Button Color="Color.Primary" Type="ButtonType.Link" To="scheduledtasks/new">New Task</Button>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>
<DataGrid TItem="@ScheduledTask"
          Data="@scheduledTasks"
          ReadData="@OnReadData"
          TotalItems="@totalScheduledTasks"
          PageSize=10
          RowSelectable=@(_=> false)
          ShowPager
          Sortable=false
          Responsive>
    <ChildContent>
        <DataGridCommandColumn TItem="ScheduledTask" />
        <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.Name)" Caption="Task Name" Editable="false">
            <DisplayTemplate>
                <Link To="@("scheduledtasks/"+context.ScheduledTaskId.ToString())">@context.Name</Link>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.Description)" Caption="Description" />
        <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.TriggerType)" Caption="Trigger" />
        <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.CronExpression)" Caption="Schedule">
            <DisplayTemplate>
                @CronExpressionDescriptor.ExpressionDescriptor.GetDescription(context.CronExpression)
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.LastRunAt)" Caption="Last Run" />
        <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.NextRunAt)" Caption="Next Run" />
        <DataGridColumn TItem="ScheduledTask" Field="@nameof(ScheduledTask.IsEnabled)" Caption="Enabled">
            <DisplayTemplate>
                <Switch TValue="bool" Checked="@context.IsEnabled" Disabled="true" />
            </DisplayTemplate>
        </DataGridColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            You don't have any scheduled tasks.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <Div><SpinKit Type="SpinKitType.Fold" Color="#36403a" Centered="true" /></Div>
    </LoadingTemplate>
</DataGrid>

@code {

    private List<ScheduledTask> scheduledTasks = default!;

    private int totalScheduledTasks = default;

    private async Task OnReadData(DataGridReadDataEventArgs<ScheduledTask> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            tryReload:
            try
            {
                await this.PageProgressService.Go(null, options => { options.Color = Color.Success; });

                int skip, pageSize;

                if (e.ReadDataMode is DataGridReadDataMode.Virtualize)
                {
                    skip = e.VirtualizeOffset;
                    pageSize = e.VirtualizeCount;
                }
                else if (e.ReadDataMode is DataGridReadDataMode.Paging)
                {
                    skip = ((e.Page - 1) * e.PageSize);
                    pageSize = e.PageSize;
                }
                else
                {
                    throw new NotImplementedException("ReadDataMode");
                }

                var pageOptions = new PageOptions()
                    {
                        Offset = skip,
                        PageSize = pageSize
                    };

                var ret = await this.scheduledTaskService.GetPageAsync(pageOptions);

                if (ret is null)
                {
                    throw new Exception("Result is null");
                }

                this.totalScheduledTasks = ret.TotalCount;
                scheduledTasks = ret.Items;
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            catch(Exception ex)
            {
                Logger.LogError(ex, "Error loading scheduled task list");

                await this.NotificationService.Error("There was an error loading the page. Please try again.", "Error Loading Task List", a => a.IntervalBeforeClose = TimeSpan.FromSeconds(10).TotalMilliseconds);
                await Task.Delay(TimeSpan.FromSeconds(5));
                goto tryReload;
            }
            finally
            {
                await this.PageProgressService.Go(-1);
            }
        }
    }

}
